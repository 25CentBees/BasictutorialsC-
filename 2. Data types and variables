#include <iostream>
#include <iomanip>

//Variables may be placed outside of the main script, these are called "Global variables", while others are called "Local variables".
int var = 12;

int main() {

	//setting number percision to 15 decimal places.
	std::cout << std::setprecision(16);
	
	//Different ways of generating variables.
	//C-Like initialization.
	int a = 1;
	//Constructor initialization.
	int b(2);
	//Uniform initializaiton.
	int c{ 3 };
	//Declaring multiple variables at once.
	int d = 4, f = 5, g = 6;
	//Declaring an initially undetermined variable.
	int h;
	//Setting the h variable to 1.
	h = 1;

	//Data types with variables, variables may be changed on the fly.
	//int allows for the storage of intergers and ranges from -2,147483648 to 2,147,483,647 and takes up 4 bytes of memory.
	int interger = -1234567890;
	//unsigned int is the same as int but all values are positive and the range is from 0 to 4,294,967,295.
	unsigned int uInterger = -1234567890;
	//short is the same as int but takes ranges from -32,768 to 32,767 and takes up 2 bytes of memory.
	short shortInterger = -12345;
	//unsigned short is the same as int but takes ranges from 0 to 65,535.
	unsigned short uShortInterger = -12345;
	//long long is the same as int but ranges from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 and takes up 8 bytes of memory.
	long long longLong = 1234567890123456789ll;
	//unsigned long long is the same as long long but ranges from 0 to 18,446,744,073,709,551,615.
	unsigned long long ulongLong = 12345678910111213141;

	//float allows for the storing of decimal values up to 7 decimal places.
	float floatingPoint = 3.1415927f;
	//double is the same as float but allows for storing of up to 15 decimal places.
	double doubleFloatingPoint = 3.141592653589793;
	//How to use scientific notation, lowercase e may also be used.
	double scientificNotation = 6.02214676E23f;

	//char allows for the output of a single character, values range from -128 to 127 and takes up 1 byte of memory.
	//Add 256 to get the alt code symbol if the value is below 0.
	char character = -94;
	//unsigned char is the same as char but the values range from 0 to 255
	//alt code symbols from their value
	unsigned char uCharacter = 159;

	//std::string allows for the output of text from a single word to a whole stream of text.
	std::string text = "The quick brown fox jumped over the lazy dog!";

	//bool allows for boolean logic (True or false, on or off, 1 or 0) and takes up 1 byte of information
	bool trueFalse = true;
	
	//Generating a const int variable named constant and setting it equal to 2.
	//Constants can not be changed after being set and must be set initially.
	const int constant = 2;
	
	//Auto detects what type the variable should be and stores that type.
	//This should be used only when necessary as it can run into problems and it is not easy to read.
	auto automaticType = 5.193;

	int variableToConvertType = 5;
	float otherVariable = 7.13f;

	//One may convert from one type to another type to ensure data is not lost.
	//C-style type conversion.
	otherVariable = (float)variableToConvertType;
	//Function-style type conversion.
	otherVariable = float(variableToConvertType);
	//static_cast can also be used to convert from one type to another, const values to non-const values as well as many other things like pointers to classes and enums.
	//static_cast is a compile-time caster.
	otherVariable = static_cast<float>(variableToConvertType);

	//std::endl ends a line.
	std::cout << "var: " << var << std::endl;
	std::cout << "interger: " << interger << std::endl;
	std::cout << "uInterger: " << uInterger << std::endl;
	std::cout << "short interger: " << shortInterger << std::endl;
	std::cout << "unsigned short interger: " << uShortInterger << std::endl;
	std::cout << "long long: " << longLong << std::endl;
	std::cout << "unsigned long long: " << ulongLong << std::endl;
	std::cout << "floating point: " << floatingPoint << std::endl;
	std::cout << "double floating point: " << doubleFloatingPoint << std::endl;
	std::cout << "scientific notation: " << scientificNotation << std::endl;
	std::cout << "character: " << character << std::endl;
	std::cout << "unsigned character: " << uCharacter << std::endl;
	std::cout << "text: " << text << std::endl;
	std::cout << "trueFalse: " << trueFalse << std::endl;
	std::cout << "constant: " << constant << std::endl;
	std::cout << "automaticType: " << automaticType << std::endl;
	std::cout << "otherVariable: " << otherVariable << std::endl;

	return 0;
}
